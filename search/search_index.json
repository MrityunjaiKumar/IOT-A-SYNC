{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to IOT-A-SYNC Documentation This is the documentation for the IOT-A-SYNC board. What is IOT-A-SYNC? IOT-A-SYNC is rapid prototyping development board for Internet of Things (IOT) applications. This board is powered by ESP32 sytem on chip microcontroller with Xtensa dual-core. Esp32 officially supports Arduino and ESP-IDF framework built around FreeRTOS. NIC Interfaces available on IOTA-SYNC IOT-A-SYNC supports multiple globally accepted network interfaces for IOT devices communication. Various wireless communicaton options it supports are WIFI, BLE,NFC, LoRa PHY. NIC Interfaces in terms of range In terms of range of commuincation, For Short range, it supports NFC. For Medium range, it supports Wi-Fi (802.11 b/g/n) and Bluetooth (v4.2 BR/EDR and BLE). For Long range, it supports LoRa communication. Topolgy of network that can be demonstrated IOT-A-SYNC also support network topology like Star and Mesh for creating Wireless sensor network(WSN). Programming and Debugging interfaces available Programming of IOT-A-SYNC is supported by onboard USB-to-Serial converter as well as it also supports external JTAG interface for programming and debugging. On board preipherals Other on board peripherals that are available icludes:- On-Board Led, Switch, Oled(128x64) screen, BME280 sensor (provides Temperatue, Humidity, Pressue), IR transmitter led and IR Receiver sensor. All I/O pins are provide on 0.1\" male as well as female header, as well as few distictive feature I/O are available on 3 Pin JST connector compatible with commonly available sensors and other modules. The 180-point breadboard further facilitates temporary/external circuit testing via jumpers on board itself. Low power mode Also, for low power WSN, shorting jumpers are provided to limit power usuage. Some example code repository URL for ESP32-IOTA-SYNC repository: ESP32-IOTA-SYNC URL for Design and Practicum Workshop: DPW","title":"Introduction"},{"location":"#welcome-to-iot-a-sync-documentation","text":"This is the documentation for the IOT-A-SYNC board.","title":"Welcome to IOT-A-SYNC Documentation"},{"location":"#what-is-iot-a-sync","text":"IOT-A-SYNC is rapid prototyping development board for Internet of Things (IOT) applications. This board is powered by ESP32 sytem on chip microcontroller with Xtensa dual-core. Esp32 officially supports Arduino and ESP-IDF framework built around FreeRTOS.","title":"What is IOT-A-SYNC?"},{"location":"#nic-interfaces-available-on-iota-sync","text":"IOT-A-SYNC supports multiple globally accepted network interfaces for IOT devices communication. Various wireless communicaton options it supports are WIFI, BLE,NFC, LoRa PHY.","title":"NIC Interfaces available on IOTA-SYNC"},{"location":"#nic-interfaces-in-terms-of-range","text":"In terms of range of commuincation, For Short range, it supports NFC. For Medium range, it supports Wi-Fi (802.11 b/g/n) and Bluetooth (v4.2 BR/EDR and BLE). For Long range, it supports LoRa communication.","title":"NIC Interfaces in terms of range"},{"location":"#topolgy-of-network-that-can-be-demonstrated","text":"IOT-A-SYNC also support network topology like Star and Mesh for creating Wireless sensor network(WSN).","title":"Topolgy of network that can be demonstrated"},{"location":"#programming-and-debugging-interfaces-available","text":"Programming of IOT-A-SYNC is supported by onboard USB-to-Serial converter as well as it also supports external JTAG interface for programming and debugging.","title":"Programming and Debugging interfaces available"},{"location":"#on-board-preipherals","text":"Other on board peripherals that are available icludes:- On-Board Led, Switch, Oled(128x64) screen, BME280 sensor (provides Temperatue, Humidity, Pressue), IR transmitter led and IR Receiver sensor. All I/O pins are provide on 0.1\" male as well as female header, as well as few distictive feature I/O are available on 3 Pin JST connector compatible with commonly available sensors and other modules. The 180-point breadboard further facilitates temporary/external circuit testing via jumpers on board itself.","title":"On board preipherals"},{"location":"#low-power-mode","text":"Also, for low power WSN, shorting jumpers are provided to limit power usuage.","title":"Low power mode"},{"location":"#some-example-code-repository","text":"URL for ESP32-IOTA-SYNC repository: ESP32-IOTA-SYNC URL for Design and Practicum Workshop: DPW","title":"Some example code repository"},{"location":"environment/","text":"Setting up IDE What is IDE? An integrated development environment (IDE) is an application that facilitates application development. IDEs are designed to encompass all programming tasks in one application. Therefore, IDEs offer a central interface featuring all the tools a developer needs for firmware development like serial montior, editor, compiler etc. Popular IDE in opensource community Arduino Framework In opensource community, two type of environment are more popular with Arduino Framework :- Arduino IDE Visual Studio Code + PaltformIO Other Framework There are other framework also available like ESP-IDF. But its not that much popular among beginners.","title":"Setting up environment"},{"location":"environment/#setting-up-ide","text":"","title":"Setting up IDE"},{"location":"environment/#what-is-ide","text":"An integrated development environment (IDE) is an application that facilitates application development. IDEs are designed to encompass all programming tasks in one application. Therefore, IDEs offer a central interface featuring all the tools a developer needs for firmware development like serial montior, editor, compiler etc.","title":"What is IDE?"},{"location":"environment/#popular-ide-in-opensource-community","text":"","title":"Popular IDE in opensource community"},{"location":"environment/#arduino-framework","text":"In opensource community, two type of environment are more popular with Arduino Framework :- Arduino IDE Visual Studio Code + PaltformIO","title":"Arduino Framework"},{"location":"environment/#other-framework","text":"There are other framework also available like ESP-IDF. But its not that much popular among beginners.","title":"Other Framework"},{"location":"environment/Arduino_Environment/","text":"","title":"Arduino IDE"},{"location":"environment/Paltform_IO_Environment/","text":"Platform.IO First we need to install Microsoft Visual Studio Code. Follow the steps to download and install it. a. Go to https://code.visualstudio.com . b. Click on \u201cDownload\u201d button at the top right corner of the screen. c. You will be directed to a new page. Choose your OS there and click on it. d. You then will be directed to documentation page of VS code and your download will begin. NOTE(for beginners): Read the complete documentation page as it will help you to get comfortable with UI of VS code. e. Go to your downloaded file directory and install the file. Congrats you have completed the very step. Now we can setup Platform.IO. Follow these steps to do it. a. Open VS code and go to extension manager. b. Search for PlatformIO IDE extension. c. Click on Install.","title":"Platform IO"},{"location":"environment/Paltform_IO_Environment/#platformio","text":"First we need to install Microsoft Visual Studio Code. Follow the steps to download and install it. a. Go to https://code.visualstudio.com . b. Click on \u201cDownload\u201d button at the top right corner of the screen. c. You will be directed to a new page. Choose your OS there and click on it. d. You then will be directed to documentation page of VS code and your download will begin. NOTE(for beginners): Read the complete documentation page as it will help you to get comfortable with UI of VS code. e. Go to your downloaded file directory and install the file. Congrats you have completed the very step. Now we can setup Platform.IO. Follow these steps to do it. a. Open VS code and go to extension manager. b. Search for PlatformIO IDE extension. c. Click on Install.","title":"Platform.IO"}]}